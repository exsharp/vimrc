source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"set diffexpr=MyDiff()
"function MyDiff()
"  let opt = '-a --binary '
"  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
"  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
"  let arg1 = v:fname_in
" if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
"  let arg2 = v:fname_new
"  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
"  let arg3 = v:fname_out
"  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
"  let eq = ''
"  if $VIMRUNTIME =~ ' '
"    if &sh =~ '\<cmd'
"     let cmd = '""' . $VIMRUNTIME . '\diff"'
"      let eq = '"'
"    else
"      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
"    endif
"  else
"    let cmd = $VIMRUNTIME . '\diff'
"  endif
"  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
"endfunction

"符号补全
inoremap () ()<Esc>i
inoremap {} {}<Left><Enter><Esc>O
inoremap <> <><Esc>i
inoremap "" ""<Esc>i
inoremap '' ''<Esc>i
inoremap [] []<Esc>i

"消除警告声
set vb t_vb=

"禁用vi模式
set nocompatible

"设置语法高亮
syntax enable
syntax on

"设置文件格式
set fileformats=dos,unix

"自动切换目录为当前编辑文件所在目录
au BufRead,BufNewFile,BufEnter * cd %:p:h


"Gvim配色方案
colorscheme Tomorrow-Night-Eighties
     
"设置 gVim 窗口初始位置及大小
"窗口启动时自动最大化
"au GUIEnter * simalt ~x
"指定窗口出现的位置，坐标原点在屏幕左上角
winpos 150 30
"winpos 100 10
"指定窗口大小，lines为高度，columns为宽度
set lines=30 columns=100
"set lines=38 columns=120

"启用每行超过80列的字符提示（字体变蓝并加下划线），不启用就注释掉
"au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 80 . 'v.\+', -1)

"去掉欢迎界面
set shortmess=atI                                                

"隐藏工具栏和菜单栏
set guioptions-=m   "菜单栏
set guioptions-=T   "工具栏
set guioptions+=r   "右侧滚动条
set guioptions-=L   "底部滚动条
map <silent> <c-F11> :
\if &guioptions =~# 'm' <Bar>
    \set guioptions-=m <Bar>
    \set guioptions-=T <Bar>
    \set guioptions+=r <Bar>
    \set guioptions-=L <Bar>
\else <Bar>
    \set guioptions+=m <Bar>
    \set guioptions+=T <Bar>
    \set guioptions+=r <Bar>
    \set guioptions+=L <Bar>
\endif<CR>

"设置工作目录为当前编辑文件的目录
set bsdir=buffer
set autochdir

"编码设置
"set enc=utf-8
let &termencoding=&encoding
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936

"语言设置
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
set guifont=Consolas:h11
"set gfw=YaHei\ Consolas\ Hybrid:h11

"消除乱码
set helplang=cn
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"禁止生成临时文件
set nobackup

"搜索忽略大小写
set ignorecase 

"搜索逐字符高亮
set incsearch

"搜素时高亮显示被找到的文本
set hlsearch

"设置不自动折行
"set nowrap
set wrap

" 设定 << 和 >> 命令移动时的宽度为 4
set shiftwidth=4
set smarttab
set history=1024

"行内替换
set gdefault  

"始终显示行号 
set number    

"显示光标的坐标
set ruler

"高亮整行
set cursorline

"自动缩进
set noautoindent
set cindent
set smartindent

"Tab键的宽度
set shiftwidth=4
set tabstop=4

"在任何模式下启用鼠标
set mouse=a    
                
"启用折叠
set nofoldenable 
"indent 折叠方式                                  
set foldmethod=indent
"启动vim时不要自动折叠代码
set foldlevel=100 
"用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>


"启用状态栏信息
set laststatus=2   

"设置命令行的高度为2，默认为1                                
set cmdheight=2        
                              
"输入法设置
if has('multi_byte_ime')
	"未开启IME时光标背景色
	hi Cursor guifg=bg guibg=Orange gui=NONE
	"开启IME时光标背景色
	hi CursorIM guifg=NONE guibg=Skyblue gui=NONE
	" 关闭Vim的自动切换IME输入法(插入模式和检索模式)
	set iminsert=0 imsearch=0
	" 插入模式输入法状态未被记录时，默认关闭IME
	"inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
endif

"与Windows共享剪贴板
set clipboard+=unnamed

"保存文件前建立备份，保存成功后删除该备份
set writebackup     
                        
"编辑vimrc之后，重新加载
autocmd! bufwritepost _vimrc source $VIM/_vimrc

" 当文件在外部被修改，自动更新该文件
set autoread

"搜索模式里忽略大小写
set ignorecase  

" 编辑模式进行光标移动
inoremap <C-h> <left>
inoremap <C-l> <right>
inoremap <C-j> <C-o>gj
inoremap <C-k> <C-o>gk

"自动语法检查
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"mm : 规范行首空格<cr>去除多余字符<cr>删除空白行<cr>规范行数
nmap mm :%s/\r//g<cr>

"ff : 前后补全
"vmap ff <Esc>`>i')?><Esc>`<i<?=$this->_('<Esc>
vmap ff "zdi<?=$this->_('<C-R>z');?><ESC>
                                      
"##########插件管理 开始#############
"更多插件见： http://vim-scripts.org/vim/scripts.html
filetype on
set rtp+=$VIM/vimfiles/bundle/vundle/
call vundle#rc('$VIM/vimfiles/bundle/')

"插件管理核心库
Bundle 'gmarik/vundle'

"激活插件与文件类型的依赖关系
filetype plugin indent on     " required!
"#########插件汇总#############################################
Bundle 'a.vim'                      
Bundle 'Lokaltog/vim-powerline'    
Bundle 'fholgado/minibufexpl.vim'  
Bundle 'taglist.vim'           
Bundle 'majutsushi/tagbar'          
Bundle 'The-NERD-tree'              
Bundle 'winmanager'                 
Bundle 'DoxygenToolkit.vim'         
Bundle 'cSyntaxAfter'               
Bundle 'Mark--Karkat'               
Bundle 'scrooloose/nerdcommenter'  
Bundle 'tpope/vim-surround'		
Bundle 'repeat.vim'                 
Bundle 'scrooloose/syntastic' 
Bundle 'ervandew/supertab'
Bundle 'Shougo/neocomplcache.vim'


"Bundle 'garbas/vim-snipmate'
"Bundle 'MarcWeber/vim-addon-mw-utils'
"Bundle 'tomtom/tlib_vim'
"Bundle 'honza/vim-snippets'

"Bundle 'code_complete'
Bundle 'OmniCppComplete'   

"Bundle 'Valloric/YouCompleteMe'
"########插件设置##############################################

"Bundle 'a.vim'{
" 用于切换C/C++头文件
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口
"}

"Bundle 'Lokaltog/vim-powerline'{
"状态栏插件，更好的状态栏效果  
"set guifont=PowerlineSymbols\ for\ Powerline
"set t_Co=256
"let g:Powerline_symbols = 'fancy'
"}

"Bundle 'fholgado/minibufexpl.vim'{        
"好像与 Vundle 插件有一些冲突
"快速浏览和操作Buffer
"主要用于同时打开多个文件并相与切换
" let g:miniBufExplMapWindowNavArrows = 1     "用Ctrl加方向键切换到上下左右的窗口中去
" let g:miniBufExplMapWindowNavVim = 1        "用<C-k,j,h,l>切换到上下左右的窗口中去
" let g:miniBufExplMapCTabSwitchBufs = 1      "功能增强（不过好像只有在Windows中才有用）
" <C-Tab> 向前循环切换到每个buffer上,并在但前窗口打开
" <C-S-Tab> 向后循环切换到每个buffer上,并在当前窗口打开
" 在不使用 MiniBufExplorer 插件时也可用<C-k,j,h,l>切换到上下左右的窗口中去
noremap <c-k> <c-w>k
noremap <c-j> <c-w>j
noremap <c-h> <c-w>h
noremap <c-l> <c-w>l
"}

"Bundle 'taglist.vim'{
" 高效地浏览源码, 其功能就像vc中的workpace
" 那里面列出了当前文件中的所有宏,全局变量, 函数名等
" 常规模式下输入 tl 调用插件，如果有打开 Tagbar 窗口则先将其关闭
nmap tl :TagbarClose<CR>:Tlist<CR>
let Tlist_Show_One_File=1                   "只显示当前文件的tags
" let Tlist_Enable_Fold_Column=0              "使taglist插件不显示左边的折叠行
let Tlist_Exit_OnlyWindow=1                 "如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_File_Fold_Auto_Close=1            "自动折叠
let Tlist_WinWidth=30                       "设置窗口宽度
let Tlist_Use_Right_Window=1                "在右侧窗口中显示
"}

"Bundle 'majutsushi/tagbar'{
" 相对 TagList 能更好的支持面向对象
" 常规模式下输入 tb 调用插件，如果有打开 TagList 窗口则先将其关闭
nmap tb :TlistClose<CR>:TagbarToggle<CR>
let g:tagbar_width=30                       "设置窗口宽度
"let g:tagbar_left=1                         "在左侧窗口中显示
"}

"Bundle 'The-NERD-tree'{
"文件管理器
" 让Tree把自己给装饰得多姿多彩漂亮点
let NERDChristmasTree=1
" 控制当光标移动超过一定距离时，是否自动将焦点调整到屏中心
let NERDTreeAutoCenter=1
" 指定鼠标模式(1.双击打开 2.单目录双文件 3.单击打开)
let NERDTreeMouseMode=2
" 是否默认显示书签列表
let NERDTreeShowBookmarks=1
" 是否默认显示文件
let NERDTreeShowFiles=1
" 是否默认显示行号
let NERDTreeShowLineNumbers=0
" 窗口位置（'left' or 'right'）
let NERDTreeWinPos='left'
" 窗口宽度
let NERDTreeWinSize=31
"A-t : 打开NERDTree
"map <silent> <C-t>   <ESC>:NERDTree<CR>
nmap nt :NERDTree<CR>
" 以打开NERDTree时的目录为工作目录
let NERDTreeChDirMode=1
"}

"Bundle 'winmanager'{
let g:NERDTree_title='NERD Tree'
let g:winManagerWindowLayout='NERDTree|TagList'
function! NERDTree_Start()
    exec 'NERDTree'
endfunction
function! NERDTree_IsValid()
    return 1
endfunction
"nmap <F4> :WMToggle<cr> :q<cr>
nmap wm :if IsWinManagerVisible() <BAR> WMToggle<CR> <BAR> else <BAR> WMToggle<CR>:q<CR> endif <CR> 
"}

"Bundle 'DoxygenToolkit.vim'{
map fg : Dox<cr>
let g:DoxygenToolkit_authorName="zfliu"
let g:DoxygenToolkit_licenseTag="My own license\<enter>"
let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_paramTag_pre = "@param\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_briefTag_funcName = "no"
let g:DoxygenToolkit_maxFunctionProtoLines = 30
"}

"Bundle 'cSyntaxAfter'{
" 高亮括号与运算符等
au! BufRead,BufNewFile,BufEnter *.{c,cpp,h,java,javascript} call CSyntaxAfter()
'}

"Bundle 'Mark--Karkat'{
" 给不同的单词高亮，表明不同的变量时很有用，详细帮助见 :h mark.txt
" }

"Bundle 'scrooloose/nerdcommenter'{
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
let NERDSpaceDelims = 1                     "在左注释符之后，右注释符之前留有空格
"}

"Bundle 'tpope/vim-surround'{
" 快速给单词/句子两边增加符号（包括html标签），缺点是不能用"."来重复命令
" 不过 repeat 插件可以解决这个问题，详细帮助见 :h surround.txt
"}

"Bundle 'repeat.vim'{
" 主要用"."命令来重复上次插件使用的命
"}

"Bundle 'scrooloose/syntastic'{
" 用于保存文件时查检语法
"}

"Bundle 'SuperTab'{
"只要在输入变量名或路径名等符号中途按Tab键，就能得到以前输入过的符号列表，并通过Tab键循环选择
let g:SuperTabDefaultCompletionType="context"
"}

"Bundle 'Shougo/neocomplcache.vim'{
" 关键字补全、文件路径补全、tag补全等等，各种，非常好用，速度超快。
" 在弹出补全列表后用 <c-p> 或 <c-n> 进行上下选择效果比较
" 打开这个开关后，每次补全菜单弹出时，可以再按一个”-“键，这是补全菜单中的每个候选词会被标上一个字母，只要再输入对应字母就可以马上完成选择。
let g:neocomplcache_enable_quick_match = 1
let g:neocomplcache_enable_at_startup = 1     "vim 启动时启用插件
let g:neocomplcache_disable_auto_complete = 0 "不自动弹出补全列表
let g:neocomplcache_enable_auto_select = 0  "AutoComplPop like behavior.
"用SPACE自动选择当前的候选字，并附加一个空格
"inoremap <expr><space>  pumvisible() ? neocomplcache#close_popup() ."\<SPACE>" :"\<SPACE>"
".和:这两个地方后面有空白
"Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
"}

"Bundle 'mbbill/code_complete'{
"补全函数参数，插入代码片段
"}

"Bundle 'OmniCppComplete'{   
"实现C/C++语言自动补全,主要是指针
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
let OmniCpp_SelectFirstItem =  0
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest  "preview
"}

"YouCompleteMe{
let g:ycm_global_ycm_extra_conf = 'D:/Vim/vimfiles/bundle/YouCompleteMe/python/.ycm_extra_conf.py'
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1
" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0
" 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 语法关键字补全            
let g:ycm_seed_identifiers_with_syntax=1
" 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
let g:ycm_key_invoke_completion = '<M-;>'
"}
"##########插件管理 结束#######################################

"ctags{
set tags=tags; 
set autochdir
nmap <F3> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> " :TlistUpdate<CR>
imap <F3> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> ":TlistUpdate<CR>
set tags+=D:/Vim/tags/Mingw_tags
set tags+=D:/Vim/tags/VS_tags
set tags+=D:/Vim/tags/STL_tags
"set tags+=$VIM/vimfiles/tags/cpp
"set tags+=./tags " add current directory's generated tags file当前目录
"set tags+=~/arm/linux-2.6.24.7/tags "add new tags file(刚刚生成tags的路径，在ctags -R 生成tags文件后，不要将tags移动到别的目录，否则ctrl+］时，会提示找不到源码文件)
"}

"##########以上是其它设置#########################################
"  < 单文件编译、连接、运行配置 >
map <F5> :call CompileRun()<CR><CR>
func! CompileRun()
	exec "w"
    if (&filetype == 'c'||&filetype == 'cpp')
       	execute "call Do_OneFileMake()"
    elseif &filetype == 'python'
		execute "!python %"
    elseif &filetype == 'java' 
        execute "!javac %" 
        execute "!java %<"
	elseif &filetype == 'sh'
        :!%
    endif
endfunc


"map <F5> :call Do_OneFileMake()<CR>
function! Do_OneFileMake()
	if(has("win32") || has("win95") || has("win64") || has("win16"))
		let g:iswindows=1
	else
		let g:iswindows=0
	endif
	exe ":ccl"
	exe ":set fenc=utf-8"
	exe ":update"
    if expand("%:p:h")!=getcwd()
        echohl WarningMsg | echo "Fail to make! This file is not in the current dir! Press <F7> to redirect to the dir of this file." | echohl None
        return
    endif
    let sourcefileename=expand("%:t")
    if (sourcefileename=="" || (&filetype!="cpp" && &filetype!="c"))
        echohl WarningMsg | echo "Fail to make! Please select the right file!" | echohl None
        return
    endif
    let deletedspacefilename=substitute(sourcefileename,' ','','g')
    if strlen(deletedspacefilename)!=strlen(sourcefileename)
        echohl WarningMsg | echo "Fail to make! Please delete the spaces in the filename!" | echohl None
        return
    endif
    if &filetype=="c"
        if g:iswindows==1
            set makeprg=gcc\ -fexec-charset=GBK\ -o\ %<.exe\ %
							"-finput-charset=UTF-8\
        else
            set makeprg=gcc\ -o\ %<\ %
        endif
    elseif &filetype=="cpp"
        if g:iswindows==1
            set makeprg=g++\ -fexec-charset=GBK\ -o\ %<.exe\ %
							"-finput-charset=UTF-8\
        else
            set makeprg=g++\ -o\ %<\ %
        endif
    elseif &filetype=="cs"
        set makeprg=csc\ \/nologo\ \/out:%<.exe\ %
    endif
    if(g:iswindows==1)
        let outfilename=substitute(sourcefileename,'\(\.[^.]*\)' ,'.exe','g')
        let toexename=outfilename
    else
        let outfilename=substitute(sourcefileename,'\(\.[^.]*\)' ,'','g')
        let toexename=outfilename
    endif
    if filereadable(outfilename)
        if(g:iswindows==1)
            let outdeletedsuccess=delete(getcwd()."\\".outfilename)
        else
            let outdeletedsuccess=delete("./".outfilename)
        endif
        if(outdeletedsuccess!=0)
            set makeprg=make
            echohl WarningMsg | echo "Fail to make! I cannot delete the ".outfilename | echohl None
            return
        endif
    endif
    execute "silent make"
    set makeprg=make
    execute "normal :"
    if filereadable(outfilename)
        if(g:iswindows==1)
            execute "!".toexename
        else
            execute "!./".toexename
        endif
		else
			execute "copen"
    endif
    "execute "copen"
endfunction

"C,C++调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %<"
    exec "!gdb %<"
endfunc

"进行make的设置
map <F6> :call Do_make()<CR>
map <c-F6> :silent make clean<CR>
function! Do_make()
    set makeprg=make
    execute "silent make"
    execute "copen"
endfunction

function! CheckPythonSyntax() 
    let mp = &makeprg 
    let ef = &errorformat 
    let exeFile = expand("%:t") 
    setlocal makeprg=python\ -u 
    set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m 
    silent make % 
    copen 
    let &makeprg     = mp 
    let &errorformat = ef 
endfunction

